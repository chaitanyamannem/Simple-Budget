package com.bus.sbud.dao.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import com.bus.sbud.dao.ExpenseDAO;
import com.bus.sbud.model.Expense;
import com.bus.sbud.util.DateUtil;
import com.bus.sbud.util.SBUDConstants;

/**
 * @author chaitanyam
 * 
 */
@Repository
public class JDBCExpenseDAO implements ExpenseDAO {

	private JdbcTemplate jdbcTemplate;
	private SimpleJdbcInsert insertExpense;

	@Autowired
	public void init(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
		this.insertExpense = new SimpleJdbcInsert(dataSource).withTableName(
				SBUDConstants.TABLE_EXPENSE).usingGeneratedKeyColumns(
				SBUDConstants.TABLE_COMMON_COLUMN_ID);

	}

	public Expense insert(Expense expense) {
		Map<String, Object> parameters = new HashMap<String, Object>(8);
		parameters.put(SBUDConstants.TABLE_EXPENSE_COLUMN_AMOUNT,
				expense.getAmount());
		parameters.put(SBUDConstants.TABLE_EXPENSE_COLUMN_SPENT_ON,
				expense.getSpentOn());
		parameters.put(SBUDConstants.TABLE_COMMON_COLUMN_TLM, expense.getTlm());
		parameters.put(SBUDConstants.TABLE_COMMON_COLUMN_CATEGORY_ID,
				expense.getCategoryId());
		parameters.put(SBUDConstants.TABLE_EXPENSE_COLUMN_NOTES, expense.getNotes());
		Number autoGeneratedId = insertExpense.executeAndReturnKey(parameters);
		expense.setId(autoGeneratedId.longValue());
		return expense;

	}

	public int update(Expense expense) {

		String updateExpenseQuery = "UPDATE EXPENSE SET AMOUNT=?, SPENT_ON = ?,TLM=?,CATEGORY_ID = ? WHERE ID = ?;";
		/*
		 * Always set the category id to default option other(id=1) if category
		 * is not known and tlm will always be set to today's date
		 */
		Long categoryId = expense.getCategoryId() == 0 ? 1L : expense
				.getCategoryId();
		return this.jdbcTemplate.update(updateExpenseQuery,
				expense.getAmount(), expense.getSpentOn(), new Date(),
				categoryId, expense.getId());
	}

	public Expense findById(Long id) {

		String getExpenseObjectQuery = "SELECT * FROM EXPENSE WHERE ID= ?;";
		Expense expense = this.jdbcTemplate.queryForObject(
				getExpenseObjectQuery, new Object[] { id },
				new RowMapper<Expense>() {
					public Expense mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Expense expense = new Expense();
						expense.setId(rs
								.getLong(SBUDConstants.TABLE_COMMON_COLUMN_ID));
						expense.setAmount(rs
								.getDouble(SBUDConstants.TABLE_EXPENSE_COLUMN_AMOUNT));
						expense.setSpentOn(rs
								.getDate(SBUDConstants.TABLE_EXPENSE_COLUMN_SPENT_ON));
						expense.setTlm(rs
								.getDate(SBUDConstants.TABLE_COMMON_COLUMN_TLM));
						expense.setCategoryId(rs
								.getLong(SBUDConstants.TABLE_COMMON_COLUMN_CATEGORY_ID));
						return expense;

					}
				});

		return expense;
	}

	public List<Expense> findAllExpensesByDate(Date onDate) {
		String OnDateString = DateUtil.formatDate(onDate,
				DateUtil.DATE_FORMAT_YYYY_MM_DD_WITH_DASH)
				+ SBUDConstants.PERCENT_SYMBOL;

		String getExpensesByDateQuery = "SELECT * FROM EXPENSE WHERE SPENT_ON LIKE ? ;";
		List<Expense> expenses = this.jdbcTemplate.query(
				getExpensesByDateQuery, new Object[] { OnDateString },
				new RowMapper<Expense>() {
					public Expense mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Expense expense = new Expense();
						expense.setId(rs
								.getLong(SBUDConstants.TABLE_COMMON_COLUMN_ID));
						expense.setAmount(rs
								.getDouble(SBUDConstants.TABLE_EXPENSE_COLUMN_AMOUNT));
						expense.setSpentOn(rs
								.getDate(SBUDConstants.TABLE_EXPENSE_COLUMN_SPENT_ON));
						expense.setTlm(rs
								.getDate(SBUDConstants.TABLE_COMMON_COLUMN_TLM));
						expense.setCategoryId(rs
								.getLong(SBUDConstants.TABLE_COMMON_COLUMN_CATEGORY_ID));
						expense.setNotes(rs.getString(SBUDConstants.TABLE_EXPENSE_COLUMN_NOTES));
						return expense;

					}
				});
		return expenses;
	}

	/**
	 * Gives one month data only
	 * 
	 * @return
	 * @throws SQLException
	 */
	public List<Map<String, Object>> findTotalByDayInAMonth(Date date) {

		String dateAsString = DateUtil.formatDate(date,
				DateUtil.DATE_FORMAT_YYYY_MM_DD_WITH_DASH);

		String getTotalByDayInAMonthQuery = "SELECT SPENT_ON, SUM(AMOUNT) from EXPENSE "
				+ " WHERE (MONTH(SPENT_ON) = (MONTH('"
				+ dateAsString
				+ "')) AND YEAR(SPENT_ON) = YEAR('"
				+ dateAsString
				+ "')) "
				+ " GROUP BY SPENT_ON ORDER BY SPENT_ON; ";

		return this.jdbcTemplate.queryForList(getTotalByDayInAMonthQuery);

	}

}
