/**
 * 
 */
package com.bus.sbud.dao.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import com.bus.sbud.dao.TagDAO;
import com.bus.sbud.model.Tag;
import com.bus.sbud.util.SBUDConstants;

/**
 * @author chaitanyam
 * 
 */
@Repository
public class JDBCTagDAO implements TagDAO {

	private JdbcTemplate jdbcTemplate;
	private SimpleJdbcInsert insertTag;

	@Autowired
	public void init(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
		this.insertTag = new SimpleJdbcInsert(dataSource).withTableName(
				SBUDConstants.TABLE_TAG).usingGeneratedKeyColumns(
				SBUDConstants.TABLE_COMMON_COLUMN_ID);

	}

	public Tag insert(Tag tag) {
		Map<String, Object> parameters = new HashMap<String, Object>(4);
		parameters.put(SBUDConstants.TABLE_COMMON_NAME, tag.getName());
		Number autoGeneratedId = insertTag.executeAndReturnKey(parameters);
		tag.setId(autoGeneratedId.longValue());
		return tag;

	}

	public int update(Tag tag) {
		String updateTagQuery = "UPDATE TAG SET NAME=? WHERE ID = ?;";
		return this.jdbcTemplate.update(updateTagQuery, tag.getName(),
				tag.getId());
	}

	public Long findIdByName(String name) {

		String getTagIdQuery = "SELECT ID FROM TAG WHERE NAME='" + name + "';";
		try {
			return this.jdbcTemplate.queryForObject(getTagIdQuery, Long.class);
		} catch (EmptyResultDataAccessException e) {
			return null;
		}
	}

	public String findNameById(Long id) {

		String getNameByIdQuery = "SELECT NAME FROM TAG WHERE id='" + id + "';";
		try {
			return this.jdbcTemplate.queryForObject(getNameByIdQuery,
					String.class);
		} catch (EmptyResultDataAccessException e) {
			return null;
		}
	}

	/*
	 * public List<String> findTagNamesByIds(List<Long> tagids) {
	 * 
	 * List<String> tagNamesList = new ArrayList<String>();
	 * 
	 * for (Long id : tagids) { try { tagNamesList.add(findById(id)); } catch
	 * (SQLException e) { // TODO Auto-generated catch block
	 * e.printStackTrace(); } }
	 * 
	 * return tagNamesList;
	 * 
	 * }
	 */

	

	/*
	 * public Boolean isTagLinkedToExpense(Long tagId, Long expenseId) throws
	 * SQLException {
	 * 
	 * try { st = con.createStatement(); ResultSet rs = st
	 * .executeQuery("select EXPENSE_ID from EXPENSE_TAG WHERE TAG_ID = " +
	 * tagId + " AND EXPENSE_ID =" + expenseId +";"); boolean found =
	 * rs.first();
	 * 
	 * return found; } catch (SQLException se) { se.printStackTrace(); } finally
	 * { if (pstmt != null) { pstmt.close(); } } return null; }
	 */

	/*
	 * public void linkTagNExpense(long expenseId, long tagId) throws
	 * SQLException { logger.info(
	 * "##########################################start########################################################################"
	 * ); logger.info("expenseId = " + expenseId); logger.info("tagId = " +
	 * tagId); logger.info(
	 * "##################################################################################################################"
	 * );
	 * 
	 * try {
	 * 
	 * String linkExpenseNTag =
	 * "INSERT INTO EXPENSE_TAG(EXPENSE_ID,TAG_ID) VALUES (?,?);";
	 * 
	 * pstmt = con.prepareStatement(linkExpenseNTag);
	 * 
	 * pstmt.setLong(1, expenseId); pstmt.setLong(2, tagId);
	 * 
	 * int queryResponse = pstmt.executeUpdate();
	 * 
	 * logger.info("queryResponse for insert" + queryResponse);
	 * 
	 * } catch (SQLException e) { e.printStackTrace(); } finally {
	 * pstmt.close();
	 * 
	 * } logger.info(
	 * "********************************************End**********************************************************************"
	 * );
	 * 
	 * }
	 */

	

	public List<Tag> findTagsBySearchQuery(String searchQuery) {

		String getTagsQuery = "SELECT * FROM TAG WHERE NAME LIKE '"
				+ searchQuery + "%';";
		List<Tag> tags = this.jdbcTemplate.query(getTagsQuery,
				new RowMapper<Tag>() {
					public Tag mapRow(ResultSet rs, int rowNum)
							throws SQLException {
						Tag tag = new Tag();
						tag.setId(rs
								.getLong(SBUDConstants.TABLE_COMMON_COLUMN_ID));
						tag.setName(rs
								.getString(SBUDConstants.TABLE_COMMON_NAME));
						return tag;

					}
				});
		return tags;

	}
	
	

}
